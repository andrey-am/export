#!/usr/bin/env python3

# Weka Prometheus client
# Vince Fleming
# vince@weka.io
#

import argparse
# system imports
import logging.handlers
import os
import sys
import time
import traceback
import platform
from multiprocessing import Process

import prometheus_client

import wekalib.signals as signals
from collector import wekaCollector
from lokilogs import LokiServer
# local imports
from wekalib.wekacluster import WekaCluster

VERSION = "1.0.3"


def prom_client(prom_port, configfile, cluster_hosts, auth, lokihost, lokiport):
    # set the root logger
    logger = logging.getLogger()

    try:
        cluster_obj = WekaCluster(cluster_hosts, auth)
    except Exception as exc:
        track = traceback.format_exc()
        print(track)
        logger.critical(f"unable to create cluster object: {exc}")
        sys.exit(1)

    # create the wekaCollector object
    collector = wekaCollector(configfile, cluster_obj)

    if lokihost is not None:
        lokiserver = LokiServer(lokihost, lokiport)
    else:
        lokiserver = None

    #
    # Start up the server to expose the metrics.
    #
    logger.info(f"starting http server on port {prom_port}")
    prometheus_client.start_http_server(int(prom_port))

    # register our custom collector
    prometheus_client.REGISTRY.register(collector)

    while True:
        time.sleep(30)  # sleep first, just in case we're started at the same time as Loki; give it time
        if lokiserver is not None:
            logger.info(f"getting events for cluster {cluster_obj.name}")
            try:
                events = cluster_obj.get_events()
            except Exception as exc:
                logger.critical(f"Error getting events: {exc} for cluster {cluster_obj.name}")
                logger.critical(f"{traceback.format_exc()}")
            else:
                try:
                    lokiserver.send_events(events, cluster_obj)
                except Exception as exc:
                    logger.critical(f"Error sending events: {exc} for cluster {cluster_obj.name}")
                    logger.critical(f"{traceback.format_exc()}")


def setup_logging(verbosity):
    if verbosity == 0:
        loglevel = logging.ERROR
    elif verbosity == 1:
        loglevel = logging.WARNING
    elif verbosity == 2:
        loglevel = logging.INFO
    elif verbosity > 2:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.DEBUG

    # set the root logger
    logger = logging.getLogger()
    FORMAT = "%(process)s:%(filename)s:%(lineno)s:%(funcName)s():%(levelname)s:%(message)s"
    logger.setLevel(loglevel)

    # create handler to log to syslog
    print(f"setting syslog on {platform.platform()}")
    if platform.platform()[:5] == "macOS":
        syslogaddr = "/var/run/syslog"
    else:
        syslogaddr = "/dev/log"
    syslog_handler = logging.handlers.SysLogHandler(syslogaddr)
    syslog_handler.setFormatter(logging.Formatter(FORMAT))

    # create handler to log to stderr
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(FORMAT))

    # add handlers to root logger
    if syslog_handler is not None:
        logger.addHandler(syslog_handler)
    logger.addHandler(console_handler)

    # configure logging in collector module
    logging.getLogger("collector").setLevel(logging.INFO)

    # configure logging in wekalib module (default for all)
    logging.getLogger("wekalib").setLevel(logging.ERROR)

    # configure logging in wekaapi module
    logging.getLogger("wekalib.wekaapi").setLevel(logging.INFO)

    # configure logging in sthreads module
    logging.getLogger("wekalib.sthreads").setLevel(logging.ERROR)

    # configure logging in wekacluster module
    logging.getLogger("wekalib.wekacluster").setLevel(logging.INFO)

    # configure logging in lokilogs module
    logging.getLogger("lokilogs").setLevel(logging.INFO)

    # configure logging in circular module
    # logging.getLogger("wekalib.circular").setLevel(logging.INFO)

    # configure logging in urllib3 module
    logging.getLogger("urllib3").setLevel(logging.ERROR)

    return logger

def main():
    # handle signals (ie: ^C and such)
    signals.signal_handling()

    # parse arguments
    parser = argparse.ArgumentParser(description="Prometheus Client for Weka clusters")
    parser.add_argument("-c", "--configfile", dest='configfile', default="./export.yml",
                        help="override ./export.yml as config file")
    parser.add_argument("-p", "--port", dest='port', default="8001", help="TCP port number to listen on")
    parser.add_argument("--loki_host", dest='lokihost', default=None, help="hostname/ip for loki server")
    parser.add_argument("--loki_port", dest='lokiport', default="3100", help="port for loki server")
    parser.add_argument('clusterspec', default="localhost", nargs='*',
                        help="Cluster specifications.  <host>,<host>,...:authfile")
    parser.add_argument("-v", "--verbosity", action="count", default=0, help="increase output verbosity")
    parser.add_argument("--version", dest="version", default=False, action="store_true", help="Display version number")
    args = parser.parse_args()

    if args.version:
        print(f"{sys.argv[0]} version {VERSION}")
        sys.exit(0)

    log = setup_logging(args.verbosity)

    # schedule up a process for each cluster, put them on conescutive ports starting at 8001 (or specified port)
    subprocess = {}
    port = int(args.port)

    for spec in args.clusterspec:
        clusterspeclist = spec.split(":")
        hostlist = clusterspeclist[0]

        subprocess[hostlist] = {}
        subprocess[hostlist]["hosts"] = hostlist

        if len(clusterspeclist) > 1:
            cluster_auth = clusterspeclist[1]
            subprocess
        else:
            cluster_auth = None

        subprocess[hostlist]["auth"] = cluster_auth
        subprocess[hostlist]["port"] = port
        subprocess[hostlist]["pid"] = None

        port += 1

    while True:
        for clusterspec, info in subprocess.items():
            if info["pid"] is None:
                info["pid"] = Process(target=prom_client, args=(
                    info["port"],
                    args.configfile,
                    info["hosts"],
                    info["auth"],
                    args.lokihost,
                    args.lokiport
                    ))
                log.info(f"Starting child exporter for cluster {info['hosts']}")
                info['pid'].start()

        time.sleep(20)

        # monitor subprocesses
        for clusterspec, info in subprocess.items():
            if not info['pid'].is_alive():
                log.critical(f"Child exporter for cluster {clusterspec} died.")
                info['pid'].join()
                info['pid'] = None    # make it restart

if __name__ == '__main__':
    sys.exit(main())

